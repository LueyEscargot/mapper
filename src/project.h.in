#ifndef _PROJECT_H_
#define _PROJECT_H_

#include <string>
#include <sstream>

// project info
typedef struct PROJECT_INFO
{
    const char *NAME = "@PROJECT_NAME@";
    const char *VERSION = "@PROJECT_VERSION@";
    const char *VERSION_MAJOR = "@PROJECT_VERSION_MAJOR@";
    const char *VERSION_MINOR = "@PROJECT_VERSION_MINOR@";
    const char *VERSION_PATCH = "@PROJECT_VERSION_PATCH@";

    // std::string getProjectInfo() const
    std::string toStr() const
    {
        std::stringstream ss;
        ss << NAME << "(" << VERSION << ")";
        return ss.str();
    }
} ProjectInfo_t;

// build env
typedef struct BUILD_ENV
{
    const char *HOST_SYSTEM_NAME = "@CMAKE_HOST_SYSTEM_NAME@";
    const char *HOST_SYSTEM_PROCESSOR = "@CMAKE_HOST_SYSTEM_PROCESSOR@";
    const char *HOST_SYSTEM = "@CMAKE_HOST_SYSTEM@";
    const char *HOST_SYSTEM_VERSION = "@CMAKE_HOST_SYSTEM_VERSION@";
    const char *LIBRARY_ARCHITECTURE = "@CMAKE_LIBRARY_ARCHITECTURE@";

    std::string toStr() const
    {
        std::stringstream ss;
        ss << HOST_SYSTEM << "," << LIBRARY_ARCHITECTURE << "";
        return ss.str();
    }
} BuildEnv_t;

// build info
typedef struct BUILD_INFO
{
    const char *SINCE = "";
    const char *LAST = "";
    const char *COUNT = "";

    std::string toStr() const
    {
        std::stringstream ss;
        ss << SINCE << "," << LAST << "," << COUNT << "";
        return ss.str();
    }
} BuildInfo_t;

// project
typedef struct PROJECT
{
    ProjectInfo_t projectInfo;
    BuildEnv_t buildEnv;
    BuildInfo_t buildInfo;
    std::string toStr() const
    {
        return projectInfo.toStr() + "," +
               buildEnv.toStr() + "," +
               buildInfo.toStr();
    }
} Project_t;

// wrapper function
inline std::string projectDesc()
{
    Project_t proj;
    return proj.toStr();
}

#endif // _PROJECT_H_
